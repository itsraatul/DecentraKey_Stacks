<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dummy Software - License Verification</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
    </style>
</head>
<body class="bg-gray-900 text-white flex items-center justify-center min-h-screen">

    <div id="app-container" class="w-full max-w-md p-8 space-y-6 bg-gray-800 rounded-xl shadow-2xl border border-gray-700">
        
        <!-- Initial State: Connect Wallet -->
        <div id="connect-wallet-view">
            <h1 class="text-3xl font-bold text-center text-cyan-400">Protected Software</h1>
            <p class="text-center text-gray-400">Please connect your wallet to verify your license.</p>
            <button id="connect-wallet-btn" class="mt-6 w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-300">
                Connect Hiro Wallet
            </button>
        </div>

        <!-- Verification State: Enter License ID -->
        <div id="verify-license-view" class="hidden">
            <h1 class="text-2xl font-bold text-center">Welcome</h1>
            <p id="wallet-address" class="text-center text-cyan-400 font-mono text-xs break-all"></p>
            <p class="text-center text-gray-400 mt-4">Enter your License ID to unlock the software.</p>
            
            <div class="mt-6">
                <label for="license-id-input" class="text-sm font-medium text-gray-300">License ID</label>
                <input id="license-id-input" name="licenseId" type="number" placeholder="e.g., 1" required class="mt-1 block w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-cyan-500 focus:border-cyan-500">
            </div>
            <button id="verify-btn" class="mt-4 w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500 transition-colors duration-300">
                Verify License
            </button>
        </div>

        <!-- Final State: Access Granted/Denied -->
        <div id="access-view" class="hidden text-center space-y-4">
            <div id="access-icon"></div>
            <h2 id="access-title" class="text-3xl font-bold"></h2>
            <p id="access-message" class="text-gray-400"></p>
        </div>

    </div>

    <!-- FIX: Use a reliable CDN for the Stacks Connect Library -->
    <script src="https://cdn.jsdelivr.net/npm/@stacks/connect@7.6.0/dist/umd/index.umd.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const { showConnect, callReadOnlyFunction } = window.stacks.connect;
            const userSession = new window.stacks.connect.UserSession();

            // --- DOM Elements ---
            const connectWalletBtn = document.getElementById('connect-wallet-btn');
            const connectWalletView = document.getElementById('connect-wallet-view');
            const verifyLicenseView = document.getElementById('verify-license-view');
            const verifyBtn = document.getElementById('verify-btn');
            const walletAddressEl = document.getElementById('wallet-address');
            const licenseIdInput = document.getElementById('license-id-input');
            const accessView = document.getElementById('access-view');
            const accessIcon = document.getElementById('access-icon');
            const accessTitle = document.getElementById('access-title');
            const accessMessage = document.getElementById('access-message');

            // --- Contract Details ---
            const contractAddress = 'ST2JVNDBYHEXN4THNQ2RFGG02JJZSSQM31MJVYWBR'; // Replace with your deployment address
            const contractName = 'decentrakey-contract';
            const network = new window.stacks.network.StacksTestnet();

            // --- UI Logic ---
            function showView(view) {
                connectWalletView.classList.add('hidden');
                verifyLicenseView.classList.add('hidden');
                accessView.classList.add('hidden');
                view.classList.remove('hidden');
            }

            function handleSession() {
                if (userSession.isUserSignedIn()) {
                    const userData = userSession.loadUserData();
                    walletAddressEl.textContent = userData.profile.stxAddress.testnet;
                    showView(verifyLicenseView);
                } else {
                    showView(connectWalletView);
                }
            }

            // --- Event Listeners ---
            connectWalletBtn.addEventListener('click', () => {
                showConnect({
                    appDetails: {
                        name: 'Dummy Software',
                        icon: window.location.origin + '/icon.png',
                    },
                    onFinish: () => handleSession(),
                    userSession,
                });
            });

            verifyBtn.addEventListener('click', async () => {
                const licenseId = licenseIdInput.value;
                if (!licenseId) {
                    alert('Please enter a License ID.');
                    return;
                }

                const userData = userSession.loadUserData();
                const userAddress = userData.profile.stxAddress.testnet;

                const options = {
                    contractAddress,
                    contractName,
                    functionName: 'verify-license',
                    functionArgs: [
                        window.stacks.transactions.uintCV(parseInt(licenseId, 10)),
                        window.stacks.transactions.standardPrincipalCV(userAddress),
                    ],
                    network,
                    senderAddress: userAddress,
                };

                try {
                    const result = await callReadOnlyFunction(options);
                    const isOwner = window.stacks.transactions.cvToJSON(result).value.value;
                    
                    if (isOwner) {
                        displayAccessGranted();
                    } else {
                        displayAccessDenied();
                    }
                } catch (error) {
                    console.error('Verification failed:', error);
                    displayAccessDenied("Verification failed. The license might not exist or belong to another wallet.");
                }
            });

            function displayAccessGranted() {
                accessIcon.innerHTML = `<svg class="mx-auto h-16 w-16 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
                accessTitle.textContent = 'Access Granted';
                accessTitle.className = 'text-3xl font-bold text-green-400';
                accessMessage.textContent = 'Welcome! You have full access to the software.';
                showView(accessView);
            }

            function displayAccessDenied(message = 'This license is not valid for the connected wallet.') {
                accessIcon.innerHTML = `<svg class="mx-auto h-16 w-16 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
                accessTitle.textContent = 'Access Denied';
                accessTitle.className = 'text-3xl font-bold text-red-400';
                accessMessage.textContent = message;
                showView(accessView);
            }

            // --- Initial Check ---
            handleSession();
        });
    </script>
</body>
</html>
